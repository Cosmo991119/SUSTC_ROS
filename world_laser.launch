<?xml version="1.0"?>
<launch>


<!--设置launch文件的参数 -->

  <arg name="world" default="empty"/> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

<!-- 运行gazebo仿真环境 -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<arg name="world_name" value="$(find robot)/worlds/roommap.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
</include>


<!-- 在gazebo中加载机器人模型-->
  <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 base_link base_footprint 40" />
  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="-file $(find robot)/urdf/robot.urdf -urdf -model robot"
    output="screen" />
  <node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />

      <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    </node> 

    <!-- 运行robot_state_publisher节点，发布tf  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
        <param name="publish_frequency" type="double" value="50.0" />
    </node>

<!-- 运行depthimage_to_laserscan节点，将点云深度数转换成激光数据 
    <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" output="screen">
        <remap from="image" to="/kinect1/depth/image_raw" />
        <remap from="camera_info" to="/kinect1/depth/camera_info" />
        <remap from="scan" to="/scan" />
        <param name="output_frame_id" value="kinect_Link" />
    </node>-->


<node pkg="tf" type="static_transform_punlisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 map odom 100"/>

    <!-- gmapping launch -->
 <master auto="start"/>
  <param name="/use_sim_time" value="true"/>
  <!--- Run gmapping -->
  <node pkg="gmapping" name="slam_gmapping" type="slam_gmapping" output="screen">
    <param name="delta" value="0.01"/>
    <param name="xmin" value="-20"/>
    <param name="xmax" value="20"/>
    <param name="ymin" value="-20"/>
    <param name="ymax" value="20"/>
    <remap from="scan" to="/scan"/>
    <param name="base_frame" value="base_link" />

    <param name="linearUpdate" value="0.2"/>
    <param name="angularUpdate" value="0.2"/>
    <param name="temporalUpdate" value="-1.0"/>
    <param name="resampleThreshold" value="0.5"/>
    <param name="particles" value="80"/>

  </node>
  <arg
    name="model" />
  <param
    name="robot_description"
    textfile="$(find robot)/urdf/robot.urdf" />
  <param
    name="use_gui"
    value="$(arg gui)" />

      <node name="arbotix" pkg="arbotix_python" type="arbotix_driver" output="screen">
       <rosparam file="$(find robot)/config/joint_names_robot.yaml" command="load" />
       <param name="sim" value="true"/>
  </node>
<!-- 里程计估算 
   <node name="mrobot" 
pkg="mrobbot_bringup"
type="odometry_publisher"
output="screen">
<param name="odom_param" 
value="param_value" />
</node> -->

    <!-- 里程计估算 
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <remap from="robot_pose_ekf/odom_combined" to="odom_combined"/>
        <param name="freq" value="10.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="publish_tf" value="true"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="false"/>
        <param name="vo_used" value="false"/>
        <param name="output_frame" value="odom"/>
    </node> -->

 <!--    <node pkg="tf" 
type="static_transform_publisher" 
name="odom_left_wheel_broadcaster"
args="0 0 0 0 0 0 /base_link /left_front_link 100" />  
    <node pkg="tf"
type="static_transform_publisher" 
name="odom_right_wheel_broadcaster" 
args="0 0 0 0 0 0 /base_link /right_front_link 100" /> -->
  
  <node
    name="rviz"
    pkg="rviz"
    type="rviz"
    args="-d $(find robot)/urdf.rviz" />
</launch>
